var documenterSearchIndex = {"docs":
[{"location":"lib/internals/#Internal-Documentation","page":"Internals","title":"Internal Documentation","text":"","category":"section"},{"location":"lib/internals/","page":"Internals","title":"Internals","text":"Documentation for internal SeisMain.jl interface","category":"page"},{"location":"lib/internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"lib/internals/","page":"Internals","title":"Internals","text":"SeisMain.InitSeisHeader\nSeisMain.GrabHeader\nSeisMain.PutHeader\nSeisMain.BitsToHeader\nSeisMain.HeaderToBits\nSeisMain.GetNumTraces\nSeisMain.ParseHeaderName\nSeisMain.ParseDataName\nSeisMain.ParseDataFormat\nSeisMain.ParseDataESize\nSeisMain.ExtractHeader\nSeisMain.ReadTextHeader\nSeisMain.WriteTextHeader\nSeisMain.InitFileHeader\nSeisMain.GrabFileHeader\nSeisMain.PutFileHeader\nSeisMain.InitSegyHeader\nSeisMain.GrabSegyHeader\nSeisMain.PutSegyHeader\nSeisMain.MapHeaders\nSeisMain.convert","category":"page"},{"location":"lib/internals/#SeisMain.InitSeisHeader","page":"Internals","title":"SeisMain.InitSeisHeader","text":"InitSeisHeader\n\nInitialize a variable of composite type Header corresponding to the data header in seis format.  All the fields are initialized to 0.0.  Type ?SeisMain.Header for a detail of the fields included. \n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.GrabHeader","page":"Internals","title":"SeisMain.GrabHeader","text":"GrabHeader(stream,j)\n\nExtract the header from trace j of a file in seis format.\n\nArguments\n\nstream::IOStream: data file in seis format\nj::Integer: Trace number\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.PutHeader","page":"Internals","title":"SeisMain.PutHeader","text":"PutHeader(stream,j)\n\nWrite the header of trace j to a file in seis format. \n\nArguments\n\nstream::IOStream: data file in seis format\nj::Integer: Trace number\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.BitsToHeader","page":"Internals","title":"SeisMain.BitsToHeader","text":"BitsToHeader(h_in)\n\nReinterpret an input header to its correct type.  The function outputs a variable of composite type Header.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.HeaderToBits","page":"Internals","title":"SeisMain.HeaderToBits","text":"HeaderToBits(h_in)\n\nReinterpret a composite type variable of type Header to 32 bits The function outputs an Vector with 31 elements of type Header32Bit.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.GetNumTraces","page":"Internals","title":"SeisMain.GetNumTraces","text":"GetNumTraces(file)\n\nCalculate the total number of traces in a data file with seis format\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.ParseHeaderName","page":"Internals","title":"SeisMain.ParseHeaderName","text":"ParseHeaderName(file::AbstractString)\n\nParse the name of the header file from an extent file to a String variable.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.ParseDataName","page":"Internals","title":"SeisMain.ParseDataName","text":"ParseDataName(file::AbstractString)\n\nParse the name of the data file from an extent file to a String variable.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.ParseDataFormat","page":"Internals","title":"SeisMain.ParseDataFormat","text":"ParseDataFormat(file::AbstractString)\n\nParse the format of the data type in the extent file to a String variable.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.ParseDataESize","page":"Internals","title":"SeisMain.ParseDataESize","text":"ParseDataESize(file::AbstractString)\n\nParse the esize in the extent file to a Int32 variable.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.ExtractHeader","page":"Internals","title":"SeisMain.ExtractHeader","text":"ExtractHeader(h::Array{Header,1},key::AbstractString)\n\nExtracts the values of a field in the header. The output is a vector of the same type as the field. \n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.ReadTextHeader","page":"Internals","title":"SeisMain.ReadTextHeader","text":"ReadTextHeader(filein)\n\nReads the extent file of data in seis format.  The result outputs in a variable of composite type Extent.  Type ?SeisMain.Extent for a detail on the included fields. \n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.WriteTextHeader","page":"Internals","title":"SeisMain.WriteTextHeader","text":"WriteTextHeader(filename,extent,format,esize,filename_d,filename_h)\n\nWrites the extent file, corresponding to the seis format, to the file filename. \n\nArguments\n\nextent: variable of type Extent to write to file\nformat: format of the data type in file @data@\nesize: esize \nfilename_d: path of the @data@ file as a String variable\nfilename_h: path of the @headers@ file a a String variable\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.InitFileHeader","page":"Internals","title":"SeisMain.InitFileHeader","text":"InitFileHeader\n\nInitializes a variable of composite type fileHeader corresponding to the file header in SEGY format. All the fields are initialized to 0. Type ?SeisMain.fileHeader for a detail of the fields included. \n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.GrabFileHeader","page":"Internals","title":"SeisMain.GrabFileHeader","text":"GrabFileHeader(stream)\n\nExtracts the file header from a standard SEGY rev0 data file, starting from byte 3200.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.PutFileHeader","page":"Internals","title":"SeisMain.PutFileHeader","text":"PutFileHeader(stream,fh)\n\nWrites the file header on a standard SEGY rev0 format file. \n\nArguments\n\nstream::IOStream: data file in seis format\nfh::fileHeader: file Header to write \n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.InitSegyHeader","page":"Internals","title":"SeisMain.InitSegyHeader","text":"InitSegyHeader()\n\nInitializes a variable of composite type SegyHeader corresponding to the trace header in SEGY format.  All the fields are initialized to 0.  Type ?SeisMain.SegyHeader for a detail of the fields included. \n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.GrabSegyHeader","page":"Internals","title":"SeisMain.GrabSegyHeader","text":"GrabSegyHeader(stream,swap_bytes,nt,file_header_size,j)\n\nExtracts the header from trace j of a file in segy format.  The output is of composite type SegyHeader.\n\nArguments\n\nstream::IOStream: data file in segy format\nswap_bytes: boolean variable. Consider it for indianness\nnt: time samples.\nfile_header_size: Size of file header in bytes: 0 for su files, 3600 for Segy rev0 standard.\nj::Integer: Trace number\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.PutSegyHeader","page":"Internals","title":"SeisMain.PutSegyHeader","text":"PutSegyHeader(stream,h,nt,file_header_size,j)\n\nWrites the header of trace j to a file in segy format. \n\nArguments\n\nstream::IOStream: data file in segy format\nh::SegyHeader: header variable to write\nfile_header_size: Size of file header in bytes: 0 for su files, 3600 for Segy rev0 standard.\nj::Integer: Trace number\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#SeisMain.MapHeaders","page":"Internals","title":"SeisMain.MapHeaders","text":"MapHeaders(h_in,j,map_type)\n\nMaps header attributes from seis byte location to segy byte location in the file and backwards.  The output is of type Header or SegyHeader accordingly.\n\nArguments\n\nh_in: header input data\nj::Integer: Trace number\nmap type: \"SegyToSeis\" or \"SeisToSegy\"\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#Base.convert","page":"Internals","title":"Base.convert","text":"convert(::Type{Float32}, ibm::IBMFloat32)\n\nExtension of function convert in SeismicJulia to cover IBMFloat32 Floating-point format\n\n\n\n\n\n","category":"function"},{"location":"man/guide/#Package-guide","page":"Guide","title":"Package guide","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"SeisMain.jl provides seismic data reading, writing and handling tools.  Format conversion is available between SEIS data and SEGY, and SU.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"With SeisMain.jl installed we can do a simple example showing format conversion","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"using SeisMain, SeisPlot\nrun(`mkdir -p data`)\ndownload(\"http://seismic.physics.ualberta.ca/data/616_79_PR.SGY\", \"data/616_79_PR.SGY\")\nSegyToSeis(\"data/616_79_PR.SGY\", \"data/616_79_PR.seis\")\nSeisWindow(\"data/616_79_PR.seis\", \"data/616_79_PR_2s.seis\", key= [\"t\"], minval=[0.0], maxval=[2.0])\nd, head, extent = SeisRead(\"data/616_79_PR_2s.seis\")\n\nSeisPlotTX(d, title=\"Seismic Plot Example\", cmap=\"PuOr\", wbox=9,ylabel=\"Time(s)\",xlabel=\"Trace Number(index)\",dy=extent.d1)","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"(Image: plot1)","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"In the above example, we first download the data, then convert the data from SU data format to SEIS format, finally the data are plotted. ","category":"page"},{"location":"lib/public/#Public-Documentation","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"Documentation for public SeisMain.jl public interface","category":"page"},{"location":"lib/public/#Public-interface","page":"Public","title":"Public interface","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"SegyToSeis\nSeisRead\nSeisReadHeaders\nSeisWrite\nSeisWriteHeaders\nSeisCopy\nSeisHeaderInfo\nSeisToSegy\nSeisRemove\nSeisWindow\nSeisWindowPatch\nSeisPatch\nSeisPatchProcess\nSeisUnPatch\nSeisGeometry\nSeisBinHeaders\nSeisBinData\nSeisProcess\nSeisSort\nReadSegyHeader\nExtractSegyHeader\nSegyHeaderInfo\ndownload_if_needed","category":"page"},{"location":"lib/public/#SeisMain.SegyToSeis","page":"Public","title":"SeisMain.SegyToSeis","text":"SegyToSeis(filename_in,filename_out;<keyword arguments>)\n\nConvert SEGY or SU data to seis format. The function needs input and output filenames.\n\nArguments\n\nformat=\"segy\" : Options are segy or su\nswap_bytes=true : If the flag equals true, the function swaps bytes\ninput_type=\"ibm\" : Options are ibm or ieee\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisRead","page":"Public","title":"SeisMain.SeisRead","text":"SeisRead(filename;<keyword arguments>)\n\nRead seismic data from a given filename in seis format. The format is comprised of three elements:\n\na text file (data extent) with geometry information\na binary file containing data (@data@)\na binary file containing headers (@headers@)\n\nKeyword arguments\n\ngroup=\"all\" : Options are all, some or gather\nkey=[\"imx\",\"imy\"]\nitrace=1 : Number of trace where the function starts reading\nntrace=10000 : Total number of traces to read\n\nOut\n\nd: data as 2d array\nh: headers as 1d array\nextent: extent of the data (try fieldnames(Extent) to see the information this contains)\n\nExample\n\nd,h,ext = SeisRead(filename)\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisReadHeaders","page":"Public","title":"SeisMain.SeisReadHeaders","text":"SeisReadHeaders(filename;<keyword arguments>)\n\nRead the headers of a input file in seis format\n\nArguments\n\ngroup=\"all\" : Options are all, some or gather\nkey=[]\nitrace=1 : Number of trace where the function starts reading\nntrace=100 : Total number of traces to read\n\nExample\n\nh = SeisRead(filename)\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisWrite","page":"Public","title":"SeisMain.SeisWrite","text":"SeisWrite(filename,d,h,extent;<keyword arguments>)\n\nWrite seismic data in seis format\n\nArguments\n\nfilename : Name of file to write/generate\nd: seismic data\nh::Array{Header,1}: headers as 1d array with elements of type Header\nextent::Extent : extent of the data (try names(Extent) to see the information this contains)\nitrace=1 : First trace number to write\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisWriteHeaders","page":"Public","title":"SeisMain.SeisWriteHeaders","text":"SeisWriteHeaders(filename,h;<keyword arguments>)\n\nWrite seismic headers in seis format\n\nArguments\n\nitrace=1 : First trace number to write\nupdate_tracenum=true \n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisCopy","page":"Public","title":"SeisMain.SeisCopy","text":"SeisCopy(in,out)\n\nCopy a seis input file to a seis output file. In and out should be of type AbstractString\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisHeaderInfo","page":"Public","title":"SeisMain.SeisHeaderInfo","text":"SeisHeaderInfo(filename;<keyword arguments>)\n\nPrint Seis header information to screen. The input is the name of the data file\n\nArguments\n\nntrace=100000 : Number of traces to analyze\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisToSegy","page":"Public","title":"SeisMain.SeisToSegy","text":"SeisToSegy(filename_in,filename_out;<keyword arguments>)\n\nConvert seis data to SU or SEGY format. The function needs input and output filenames.\n\nArguments\n\nsu=true : If the flag equals true, converts tu SU format, otherwise to SEGY format\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisRemove","page":"Public","title":"SeisMain.SeisRemove","text":"SeisRemove(filename)\n\nDelete a seis file (deletes the text file, binary data file, and binary header file if there is one)\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisWindow","page":"Public","title":"SeisMain.SeisWindow","text":"SeisWindow(in,out;<keyword arguments>)\n\nWindow a seis file using header words.\n\nArguments\n\nin::String: filename of input\nout::String: filename of output\n\nKeyword arguments\n\nkey=[]\nminval=[]\nmaxval=[]\n\nnote that windowing along the time axis is achieved by using the key \"t\".\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisWindowPatch","page":"Public","title":"SeisMain.SeisWindowPatch","text":"SeisWindowPatch(in,out;<keyword arguments>)\n\nWindow a seis file using header words.\n\nArguments\n\nin::String: filename of input\nout::String: filename of output\nkey=[]: note that windowing along the time axis is achieved by using the key \"t\".\nminval=[]\nmaxval=[]\nit_nt=9e9\n\nCredits: AS, FC, 2017\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisPatch","page":"Public","title":"SeisMain.SeisPatch","text":"  SeisPatch(in,out;<keyword arguments>)\n\nCreates overlapping 5d patches from a 5d volume\n\nArguments\n\nin::String: input filename (data should have grid information in headers)\nout::String: prefix for output filenames\n\nKeyword arguments\n\nstyle=\"sxsygxgy\": bin style. Options: \"mxmyhxhy\",\"mxmyhaz\",\"sxsyhxhy\",\"gxgyhxhy\",\"sxsyhaz\",\"gxgyhaz\"\nmin_isx=0,max_isx=0,min_isy=0,max_isy=0: grid extreme values for sources\nmin_igx=0,max_igx=0,min_igy=0,max_igy=0: grid extreme values for receivers\nmin_imx=0,max_imx=0,min_imy=0,max_imy=0: grid extreme values for midpoints\nmin_ihx=0,max_ihx=0,min_ihy=0,max_ihy=0: grid extreme values for offsets\nmin_ih=0,max_ih=0,min_iaz=0,max_iaz=0: grid extreme values for azimuth and offset\nit_WL=9e9,it_WO=0 : length and overlapping samples in time patches\nix1_WL=9e9,ix1_WO=0:length and overlapping samples in first space dimension\nix2_WL=9e9,ix2_WO=0,ix3_WL=9e9,ix3_WO=0,ix4_WL=9e9,ix4_WO=0\n\nOutput\n\nfilename,npatch: String Array with the file name of the data patches, number of patches created\n\nCredits: A. Stanton\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisPatchProcess","page":"Public","title":"SeisMain.SeisPatchProcess","text":"  SeisPatchProcess(in,out;<keyword arguments>)\n\nRead data from disk, split into multidimensional overlapping patches, apply processes, merge patches with tapers, and write to disk.\n\nProcessing of patches can be done in parallel by running the code using (for example): julia -p 2 script_name.jl\n\nImportant Notice: You must make declare global variables f and fparam on every processor. You can do this in your main function by typing (for example): @everywhere global fparam = [\"style\"=>\"mxmyhxhy\", \"Niter\"=> 100, \"alpha\"=>1,\"fmax\"=>80] @everywhere global f = [SeisPOCS]\n\nf is an array of functions that have the following syntax: d2, h2 = f(d1,h1,f_param), where param is a dictionary (Dict) of parameters for the function.\n\nnote that param should contain parameters for the patching and unpatching operations.\n\nto execute the code type:  julia -p 4 my_code.jl where 4 can be replaced     with the number of processors you wish to use. Credits: A. Stanton\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisUnPatch","page":"Public","title":"SeisMain.SeisUnPatch","text":"SeisUnPatch(in,out;<keyword arguments>)\n\nReconstruct a 5D data volume from a set of 5D data patches.\n\nArguments\n\nin::Array{String,1}: array containing filename of patches\nout::String: filename for reconstructed volume\n\nKeyword arguments\n\nstyle=\"sxsygxgy\": bin style. Options: \"mxmyhxhy\",\"mxmyhaz\",\"sxsyhxhy\",\"gxgyhxhy\",\"sxsyhaz\",\"gxgyhaz\"\nmin_isx=0,max_isx=0,min_isy=0,max_isy=0: grid extreme values for sources\nmin_igx=0,max_igx=0,min_igy=0,max_igy=0: grid extreme values for receivers\nmin_imx=0,max_imx=0,min_imy=0,max_imy=0: grid extreme values for midpoints\nmin_ihx=0,max_ihx=0,min_ihy=0,max_ihy=0: grid extreme values for offsets\nmin_ih=0,max_ih=0,min_iaz=0,max_iaz=0: grid extreme values for azimuth and offset\nit_WL=9e9,it_WO=0 : length and overlapping samples in time patches\nix1_WL=9e9,ix1_WO=0:length and overlapping samples in first space dimension\nix2_WL=9e9,ix2_WO=0,ix3_WL=9e9,ix3_WO=0,ix4_WL=9e9,ix4_WO=0\nnt=0: time samples of reconstructed cube\nang=90: inline direction measured in degrees CC from East\ngamma=1: vp/vs ratio for PS Asymptotic Conversion Point gathers (use gamma=1 for PP data)\nosx=0,osy=0,ogx=0,ogy=0 : origin for source and receiver coordinate system\nomx=0,omy=0,ohx=0,ohy=0: origin for midpoint and offset coordinate system\noaz=0,oh=0 : origin for azimuth and offset coordinate system\ndsx=1,dsy=1,dgx=1,dgy=1: source and receiver step-size\ndmx=1,dmy=1,dhx=1,dhy=1: midpoint and offset step-size\ndh=1,daz=1: offset and azimuth step-size\n\nOutput\n\nIn file out, the 5D reconstructed volume is created.\n\nCredits: A. Stanton, F Carozzi, 2017\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisGeometry","page":"Public","title":"SeisMain.SeisGeometry","text":"SeisGeometry(in;<keyword arguments>)\n\nUpdate headers with geometry information. Offsets and azimuths are calculated from source and receivers coordinates.\n\nArguments\n\nin: input filename\n\nKeyword arguments\n\nang=90: inline direction measured in degrees CC from East\ngamma=1: vp/vs ratio for PS Asymptotic Conversion Point gathers (use gamma=1 for PP data)\nosx=0,osy=0,ogx=0,ogy=0 : origin for source and receiver coordinate system\nomx=0,omy=0,ohx=0,ohy=0: origin for midpoint and offset coordinate system\noaz=0,oh=0 : origin for azimuth and offset coordinate system\ndsx=1,dsy=1,dgx=1,dgy=1: source and receiver step-size\ndmx=1,dmy=1,dhx=1,dhy=1: midpoint and offset step-size\ndh=1,daz=1: offset and azimuth step-size\n\nOutputs\n\nthe @headers@ file is updated with the following information:\n\nhx,hy,h,az,mx,my : calculated offset, azimuth and midpoint\nisx,isy,igx,igy,imx,imy,ihx,ihy,ih,iaz: calculated grid nodes for source and receiver position and midpoint, offset and azimuth.\n\nCredits: A. Stanton, 2017\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisBinHeaders","page":"Public","title":"SeisMain.SeisBinHeaders","text":"SeisBinHeaders(in,out; <keyword arguments>)\n\nSequentially bin seismic headers using the available grid information.\n\nKeyword arguments should be consistent with SeisGeometry keyword arguments.\n\nArguments\n\nin: filename of input, irregularly sampled data\nout: filename of output, regularly sampled data\n\nKeyword arguments\n\nstyle=\"sxsygxgy\": bin style. Options: \"mxmyhxhy\",\"mxmyhaz\",\"sxsyhxhy\",\"gxgyhxhy\",\"sxsyhaz\",\"gxgyhaz\"\nang=90: inline direction measured in degrees CC from East\ngamma=1: vp/vs ratio for PS Asymptotic Conversion Point gathers (use gamma=1 for PP data)\nosx=0,osy=0,ogx=0,ogy=0 : origin for source and receiver coordinate system\nomx=0,omy=0,ohx=0,ohy=0: origin for midpoint and offset coordinate system\noaz=0,oh=0 : origin for azimuth and offset coordinate system\ndsx=1,dsy=1,dgx=1,dgy=1: source and receiver step-size\ndmx=1,dmy=1,dhx=1,dhy=1: midpoint and offset step-size\ndh=1,daz=1: offset and azimuth step-size\nmin_isx=0,max_isx=0,min_isy=0,max_isy=0: grid extreme values for sources\nmin_igx=0,max_igx=0,min_igy=0,max_igy=0: grid extreme values for receivers\nmin_imx=0,max_imx=0,min_imy=0,max_imy=0: grid extreme values for midpoints\nmin_ihx=0,max_ihx=0,min_ihy=0,max_ihy=0: grid extreme values for offsets\nmin_ih=0,max_ih=0,min_iaz=0,max_iaz=0: grid extreme values for azimuth and offset\nntrace=10000: maximum number of traces processed at a time\n\nOutput\n\nIn file out@headers@, binned headers are saved.\n\nCredits: Aaron Stanton,2017\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisBinData","page":"Public","title":"SeisMain.SeisBinData","text":"SeisBinData(in,out; <keyword arguments>)\n\nSequentially bin seismic data using already binned trace headers. Input arguments should be consistent with SeisBinHeaders input arguments. See also: SeisBinHeaders\n\nArguments\n\nin: filename of input, irregularly sampled data\nout: filename of output, regularly sampled data\n\nKeyword arguments\n\nstyle=\"sxsygxgy\": bin style. Options: \"mxmyhxhy\",\"mxmyhaz\",\"sxsyhxhy\",\"gxgyhxhy\",\"sxsyhaz\",\"gxgyhaz\"\nang=90: inline direction measured in degrees CC from East\ngamma=1: vp/vs ratio for PS Asymptotic Conversion Point gathers (use gamma=1 for PP data)\nosx=0,osy=0,ogx=0,ogy=0 : origin for source and receiver coordinate system\nomx=0,omy=0,ohx=0,ohy=0: origin for midpoint and offset coordinate system\noaz=0,oh=0 : origin for azimuth and offset coordinate system\ndsx=1,dsy=1,dgx=1,dgy=1: source and receiver step-size\ndmx=1,dmy=1,dhx=1,dhy=1: midpoint and offset step-size\ndh=1,daz=1: offset and azimuth step-size\nmin_isx=0,max_isx=0,min_isy=0,max_isy=0: grid extreme values for sources\nmin_igx=0,max_igx=0,min_igy=0,max_igy=0: grid extreme values for receivers\nmin_imx=0,max_imx=0,min_imy=0,max_imy=0: grid extreme values for midpoints\nmin_ihx=0,max_ihx=0,min_ihy=0,max_ihy=0: grid extreme values for offsets\nmin_ih=0,max_ih=0,min_iaz=0,max_iaz=0: grid extreme values for azimuth and offset\nntrace=10000: maximum number of traces processed at a time\n\nOutput\n\nIn file out, the binned data is saved.\n\nCredits: Aaron Stanton, 2017\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisProcess","page":"Public","title":"SeisMain.SeisProcess","text":"  SeisProcess(in,out,operators,parameters;<keyword arguments>)\n\nRun processing flows that read and write from disk\n\nf is a function that has the following syntax: d2,h2 = f(d1,h1,e1,param), where param is list of keyword arguments for the function. Note that f can be a vector of functions. They will be executed sequentially on the same group of traces.\n\nArguments\n\nin::String: input filename\nout::String: output filenames\nkey=[] \n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisSort","page":"Public","title":"SeisMain.SeisSort","text":"SeisSort(in, out;<keyword arguments>)\n\nSort a seis file using its header words\n\nArguments\n\nin: input filename >> a text file with information about data extent, data and header file names; a binary file containing data and a binary file containing headers.\nout: output filename\n\nKeyword arguments\n\nkey=[\"imx\",\"imy\"]\nrev=false : sort headers in decreasing order\nntrace=1000 : number of traces to read at a time\n\nOutput\n\nfile out is created with data sorted.\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.ReadSegyHeader","page":"Public","title":"SeisMain.ReadSegyHeader","text":"ReadSegyHeader(filename;<keyword arguments>)\n\nRead the headers of a input file in segy format\n\nArguments\n\ngroup=\"all\" : Options are all, some or gather\nswap_bytes=true : If the flag equals true, the function swaps bytes\nkey=[]\nminval=0  \nmaxval=0 \n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.ExtractSegyHeader","page":"Public","title":"SeisMain.ExtractSegyHeader","text":"ExtractSegyHeader(h,key)\n\nExtract a specific key value from the header array\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SegyHeaderInfo","page":"Public","title":"SeisMain.SegyHeaderInfo","text":"    SegyHeaderInfo(filename_in)\n\nPrint segy header information to screen. The input is the name of the headers file\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.download_if_needed","page":"Public","title":"SeisMain.download_if_needed","text":"download_if_needed(url::String, output::String, sha256sum::String)\n\nDownload the file from url to output if the file is not already present or if its SHA256 checksum does not match the sha256sum.\n\nArguments\n\nurl::String: The URL from which to download the file.\noutput::String: The path where the downloaded file will be saved.\n\nKeyword arguments\n\nsha256sum::String: The expected SHA256 checksum of the file to ensure its integrity.\n\nOutput\n\nnothing: This function returns nothing. It performs the side effect of downloading a file and verifying its checksum. If the checksum does not match, the function raises an error and deletes the downloaded file.\n\nCredits: Átila Saraiva Quintela Soares, 2024\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SeisMain","category":"page"},{"location":"#SeisMain.jl","page":"Home","title":"SeisMain.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package to read, write and process seismic data in Julia","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Convert data to a simple format\nWindow data according to defined keywords\nSort data\nBin seismic volumes\nOrganize data into patches to process independently\nOnce your data is processed, unpatch to a single volume","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SeisMain, from the SeismicJulia project, can be installed using Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add SeisMain","category":"page"}]
}
